name: Build OP12 with KSU
on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        default: "oneplus12"
      susfs_version:
        required: true
        type: string
        default: "gki-android14-6.1"
        description: >
          Set susfs version

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
    - uses: actions/checkout@v4
    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.event.inputs.TAG }}
        append-timestamp: false
    - name: Download Kernel Source
      run: |
        cd $GITHUB_WORKSPACE
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b ${{ inputs.susfs_version }}
        git clone https://github.com/TheWildJames/kernel_patches.git
        git clone https://gerrit.googlesource.com/git-repo
        git config --global user.name "wizxy"
        git config --global user.email wizxy@users.noreply.github.com
        mkdir android-kernel && cd android-kernel
        repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml
        repo sync -j$(nproc)
        
        rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
        cd ./kernel_platform
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
        cd ./KernelSU-Next/kernel
        sed -i 's/ccflags-y += -DKSU_VERSION=16/ccflags-y += -DKSU_VERSION=12000/' ./Makefile
        cd ../../
        
        echo "adding susfs"
        cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_${{ inputs.susfs_version }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/susfs.c ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/susfs.h ./common/include/linux/
        cd ./KernelSU-Next/
        patch -p1 < 10_enable_susfs_for_ksu.patch
        cd ../common
        patch -p1 < 50_add_susfs_in_${{ inputs.susfs_version }}.patch || true
        cp ../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch || true
        cd ..
        cp ../kernel_patches/selinux.c_fix.patch ./
        patch -p1 -F 3 < selinux.c_fix.patch
        cp ../kernel_patches/core_hook.c_fix.patch ./
        patch -p1 --fuzz=3 < ./core_hook.c_fix.patch
        cp ../kernel_patches/apk_sign.c_fix.patch ./
        patch -p1 -F 3 < apk_sign.c_fix.patch
        
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
        cd ..
        sed -i '2s/check_defconfig//' ./kernel_platform/common/build.config.gki
        sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./kernel_platform/build/kernel/kleaf/impl/stamp.bzl
        sed -i "s/-dirty//g" ./kernel_platform/common/scripts/setlocalversion
        
    - name: Build Boot
      working-directory: android-kernel
      run: ./kernel_platform/oplus/build/oplus_build_kernel.sh pineapple gki
    - name: Download prebuilt toolchain
      run: |
        cd $GITHUB_WORKSPACE
        AOSP_MIRROR=https://android.googlesource.com
        BRANCH=main-kernel-build-2024
        # Clone necessary prebuilt tools
        git clone $AOSP_MIRROR/platform/prebuilts/build-tools -b $BRANCH --depth 1 build-tools
        git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
        git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
        pip3 install telethon
        # Export paths to required tools as environment variables
        export AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool
        export GZIP=$GITHUB_WORKSPACE/build-tools/path/linux-x86/gzip
        export LZ4=$GITHUB_WORKSPACE/build-tools/path/linux-x86/lz4
        export MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py
        export UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py
        cd android-kernel && mkdir bootimgs
        cp ./out/dist/Image ./bootimgs
        cp ./out/dist/Image.lz4 ./bootimgs
        cd ./bootimgs
        echo 'Building Image.gz'
        $GZIP -n -k -f -9 Image >Image.gz                
        echo 'Building boot.img'
        $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        
        echo 'Building boot-gz.img'
        $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        
        echo 'Building boot-lz4.img'
        $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        
        cd ..    
    - name: Prepare artifacts
      run: |
        OUTDIR=android-kernel/out/dist/
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        cp $OUTDIR/Image ./AnyKernel3/
    - name: Upload Boot
      uses: actions/upload-artifact@v4
      with:
        name: Boot-${{ github.event.inputs.TAG }}
        path: android-kernel/bootimgs/boot*
    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ github.event.inputs.TAG }}
        path: ./AnyKernel3/*
